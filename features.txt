TODO:
soft delete:
    should i consider soft delete in the future?
    maybe just for users. 
    we will soft delet the users by setting deleted_at to the current time
    if a user is soft deleted, its topics and questions and answers should remain in the database
    there will be no soft delete for topics, questions and answers
    if a topic is deleted, all its questions and answers should be deleted
    if a question is deleted, all its answers should be deleted
    if an answer is deleted, it should be deleted


code i may need:
    create a vote on a question:
        vote, err := client.UserVoteQuestion.
            Create().
            SetUserID(user.ID).
            SetQuestionID(question.ID).
            SetVoteType("upvote").
            Save(ctx)
    create a vote on an answer:
        vote, err := client.UserVoteAnswer.
            Create().
            SetUserID(user.ID).
            SetAnswerID(answer.ID).
            SetVoteType("downvote").
            Save(ctx)

    total votes for a question:
        upvotes, err := client.UserVoteQuestion.
            Query().
            Where(
                uservotequestion.QuestionID(question.ID),
                uservotequestion.VoteType("upvote"),
            ).
            Count(ctx)

        downvotes, err := client.UserVoteQuestion.
            Query().
            Where(
                uservotequestion.QuestionID(question.ID),
                uservotequestion.VoteType("downvote"),
            ).
            Count(ctx)





API design:
    Users:
        POST    /api/v1/users
        GET     /api/v1/users/{id}
        GET     /api/v1/users                               ?limit=a&offset=b&first_name=c&last_name=d
        PUT     /api/v1/users/{id}
        PATCH   /api/v1/users/{id}
        DELETE  /api/v1/users/{id}                          - soft delete
        GET     /api/v1/users/{id}/questions                ?limit=a&offset=b&topic_id=c&tag=d,e,f
        GET     /api/v1/users/{id}/answers                  ?limit=a&offset=b&question_id=c
        GET     /api/v1/users/{id}/topics                   ?limit=a&offset=b
    Auth:
        POST    /api/v1/auth/login
        POST    /api/v1/auth/logout
        GET     /api/v1/auth/me
    Questions:
        POST    /api/v1/questions
        GET     /api/v1/questions/{id}
        GET     /api/v1/questions                           ?limit=a&offset=b&topic_id=c&user_id=d&tag=e,f,g
        PUT     /api/v1/questions/{id}
        PATCH   /api/v1/questions/{id}
        DELETE  /api/v1/questions/{id}                      - soft delete
        GET     /api/v1/questions/{id}/answers              ?limit=a&offset=b
        POST    /api/v1/questions/{id}/vote                - body: vote=upvote/downvote
    Answers:
        POST    /api/v1/questions/{question_id}/answers
        GET     /api/v1/answers/{id}
        PUT     /api/v1/answers/{id}
        PATCH   /api/v1/answers/{id}
        DELETE  /api/v1/answers/{id}                        - Soft delete
        POST    /api/v1/answers/{id}/vote                   - body: vote=upvote/downvote    
    Topics:
        POST    /api/v1/topics
        GET     /api/v1/topics/{id}
        GET     /api/v1/topics                              ?limit=a&offset=b&user_id=c&name=d
        PUT     /api/v1/topics/{id}
        PATCH   /api/v1/topics/{id}
        DELETE  /api/v1/topics/{id}                         - Soft delete
        GET     /api/v1/topics/{id}/questions               ?limit=a&offset=b&user_id=c&tag=d,e,f
    Tags:
        POST    /api/v1/tags
        GET     /api/v1/tags                                ?limit=a&offset=b&name=c
        GET     /api/v1/tags/{id}
        GET     /api/v1/tags/{id}/questions                 ?limit=a&offset=b&user_id=f&topic_id=g

    Roles:
        POST    /api/v1/roles
        GET     /api/v1/roles                               ?name=a
        GET     /api/v1/roles/{id}
        POST    /api/v1/users/{id}/roles                    - Assign roles to user


TODO: in API design: 
    add sort to questions and answers by created_at and vote_count


TODO:
    create the swagger in editor.swagger.io


the return of an api with a list should have this format:
    data
    page
    page_size
    total
    count

TODO:
    should create a script that empty all the tables in the database => script1
        a bunch of delete statements
    and another script that fills the database with some data for testing => script2
        an hurl test file
    each time i wanna test the api, i should run script1 then script2


TODO:
    a global function that pareses UUIDs from the request and returns the UUIDs

TODO: 
    add a validation library to validate user inputs.
    the validations that you have in the models package (email, required, etc) for UserRequest are not doing anything now.
    for now, they are just placeholders.
    You need to integrate a validation library like go-playground/validator to enforce the rules defined in your struct tags.
    
        
    go get github.com/go-playground/validator/v10

    code exmaple:

        func (userHandler *UserHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
            var req models.UserRequest
            if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
                utils.RespondWithError(w, http.StatusBadRequest, constants.ErrInvalidRequestBody)
                return
            }

            // ğŸ”¥ Add validation here
            validate := validator.New()
            if err := validate.Struct(req); err != nil {
                validationErrors := err.(validator.ValidationErrors)
                utils.RespondWithValidationError(w, validationErrors) // Create a helper for this
                return
            }

            // Rest of your code...
        }

TODO: 
    the delete of topic should take care of deleting all its questions and answers

TODO: 
    hurl file must read from a properties file, like for example the url for topics http://localhost:3005/api/v1/topics, this is repeated a lot
where Im i? 
    i the get users => test it
